{"version":3,"file":"MovingLight.js","sourceRoot":"","sources":["../src/MovingLight.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA,2FAAkG;AAClG,6CAA+B;AAI9B,CAAC;AAaF,SAAS,WAAW,CAClB,KAAuB,EACvB,GAAiC;IAEjC,MAAM,EAAC,WAAW,EAAE,GAAG,SAAS,EAAC,GAAG,KAAK,CAAC;IAE1C,MAAM,eAAe,GAAG,CAAC,KAA2C,EAAE,EAAE;QACtE,KAAK,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAG,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA,CAAC;IAC9C,CAAC,CAAC;IAEF,KAAK,CAAC,mBAAmB,CACvB,GAAG,EACH,GAAG,EAAE,CAAC,CAAC;QACL,UAAU,CAAC,KAAc;YACrB,IAAI,kBAAkB,CAAC,OAAO,IAAI,IAAI,EAAE;gBACpC,qCAAQ,CAAC,UAAU,CACjB,kBAAkB,CAAC,OAAO,EAC1B,KAAK,CACN,CAAC;aACH;QACP,CAAC;KACF,CAAC,EACF,EAAE,CACH,CAAC;IAEF,MAAM,kBAAkB,GAAG,KAAK,CAAC,MAAM,CAE7B,IAAI,CAAC,CAAC;IAEhB,OAAO,CACD,oBAAC,oCAA0B,IACzB,GAAG,EAAE,kBAAkB,EACvB,WAAW,EAAE,eAAe,KACxB,SAAS,GACb,CACP,CAAC;AACJ,CAAC;AAED,MAAM,2BAA2B,GAAG,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;AAElE,kBAAe,2BAA2B,CAAC","sourcesContent":["import type { ColorValue, NativeSyntheticEvent, ViewProps } from 'react-native';\nimport MovingLightNativeComponent, {Commands, SomethingEvent} from './MovingLightNativeComponent';\nimport * as React from 'react';\n\nexport interface MovingLightHandle {\n  setLightOn(value: boolean): void,\n};\n\ninterface MovingLightProps extends ViewProps {\n  // Props\n  size?: number;\n  color?: ColorValue\n  eventParam?: string;\n  objectProp?: { number: number, string: string};\n\n  // Events\n  onSomething?: (value: string) => Promise<void> | void,\n}\n  \nfunction MovingLight(\n  props: MovingLightProps,\n  ref: React.Ref<MovingLightHandle>,\n) {\n  const {onSomething, ...restProps} = props;\n\n  const handleSomething = (event: NativeSyntheticEvent<SomethingEvent>) => {\n    void onSomething?.(event.nativeEvent.value);\n  };\n\n  React.useImperativeHandle(\n    ref,\n    () => ({\n      setLightOn(value: boolean) {\n          if (nativeComponentRef.current != null) {\n              Commands.setLightOn(\n                nativeComponentRef.current,\n                value,\n              );\n            }\n      }\n    }),\n    [],\n  );\n\n  const nativeComponentRef = React.useRef<React.ElementRef<\n    typeof MovingLightNativeComponent\n  > | null>(null);\n\n  return (\n        <MovingLightNativeComponent\n          ref={nativeComponentRef}\n          onSomething={handleSomething}\n          {...restProps}\n        />\n  );\n}\n  \nconst MovingLightWithForwardedRef = React.forwardRef(MovingLight);\n\nexport default MovingLightWithForwardedRef;\n"]}